
@{
    ViewBag.Title = "DbSummaryReport";
    ViewBag.Name = "dbSummaryReport";

    string qualifier = TempData.Peek("qualifier") as string;

    Layout = "~/Views/Shared/_LayoutBasic.cshtml";
}

<h2>Upload Summary</h2>

<script type="text/javascript">
    //Retrieve inline editing max. rejected items value from web.config...
    var appConfig_InlineEditMaxRejectedItems = parseInt('@System.Configuration.ConfigurationManager.AppSettings["InlineEditMaxRejectedItems"]');
</script>


<div class="container">

    <!-- Table of Db Load Results -->
    <div class="row">
        <div class="col-md-12">
            <div id="divDbLoadResults" style="padding-left: 1.0em; padding-right: 1.0em;" class="uploader-border">
                @*<h4>Data upload summary </h4>*@
                <table style="margin-top: 1.5em;" class="table table-bordered">
                    <thead>
                        <tr>
                            <th class="col-md-6 text-center">Table Name</th>
@if ("meta_data" == qualifier)
{
                            <th class="col-md-1 text-center">Inserted</th>
                            <th class="col-md-1 text-center">Updated</th>
                            <th class="col-md-1 text-center" data-toggle="tooltip" data-placement="top" 
                                title="Duplicated records do not appear in the database">Duplicated<span style="font-weight: bold;">&#42;</span></th>
                            <th class="col-md-1 text-center">Rejected</th>
}
else
{
                            <th class="col-md-2 text-center">Inserted</th>
                            <th class="col-md-2 text-center">Rejected</th>
}
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dynamic table row template -->
                        <tr class="templateTableRow hidden">
                            <td class="col-md-6 text-center"><span style="font-size: 1.5em; font-weight: bold;" class="spanTableName">Test Table Name</span></td>
@if ("meta_data" == qualifier)
{
                            <!-- If Inserted === 0 show span else show button -->
                            <td class="col-md-1 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanInserted">0</span></td>
                            <td class="col-md-1 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-success buttonInserted">100</button></td>

                            <!-- If Updated === 0 show span else show button -->
                            <td class="col-md-1 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanUpdated">0</span></td>
                            <td class="col-md-1 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-primary buttonUpdated">50</button></td>

                            <!-- If Duplicated === 0 show span else show button -->
                            <td class="col-md-1 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanDuplicated">0</span></td>
                            <td class="col-md-1 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-primary buttonDuplicated">50</button></td>

                            <!-- If Rejected === 0 show span else show button -->
                            <td class="col-md-1 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanRejected">0</span></td>
                            <td class="col-md-1 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-danger buttonRejected" data-toggle="modal" data-target="#rejectedItemsModal">25</button></td>
}
else
{
                            <!-- If Inserted === 0 show span else show button -->
                            <td class="col-md-1 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanInserted">0</span></td>
                            <td class="col-md-1 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-success buttonInserted">100</button></td>

                            <!-- If Rejected === 0 show span else show button -->
                            <td class="col-md-1 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanRejected">0</span></td>
                            <td class="col-md-1 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-danger buttonRejected" data-toggle="modal" data-target="#rejectedItemsModal">25</button></td>
}
                        </tr>

                        <!-- DB Load Results go here... -->

                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="btn-group col-md-12" style="position: relative;">
            <div class="pull-right">
                @*<a href="/home/index" class="btn btn-success cancel" >Finish</a>*@
                <a class="btn btn-warning left hidden" href="/CSVUpload/RevisedUploadData/DragAndDropFiles_meta_data">Upload Metadata</a>
                <a class="btn btn-info left hidden" href="/CSVUpload/RevisedUploadData/DragAndDropFiles_data_values">Upload Data Values</a>
                <a class="btn btn-success cancel">Finish</a>
            </div>
        </div>
    </div>

    <!-- Modal dialog for rejected items -->
    <div class="modal fade" id="rejectedItemsModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-full" role="document">
            <div class="modal-content modal-content-full">
                <div class="modal-header">
                    <button type="button" id="btnRejectedItemsX" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <div class="row">
                        <h3 class="modal-title col-md-2" id="myModalLabel" style="display: inline-block;">Rejected&nbsp;<span id="spanRejectedItemsTitle"></span></h3>
                        <div id="tblRejectedItemsAlert" class="alert alert-warning hidden col-md-8" role="alert"
                            style="text-align: center; font-weight: bold; margin-left: 2.0em;">
                            There are more than @System.Configuration.ConfigurationManager.AppSettings["InlineEditMaxRejectedItems"] errors in your data, so editing has been disabled. Please download, fix the errors, and re-upload
                        </div>
                    </div>
                </div>
                <div class="modal-body modal-body-full">
                    @*<p>Rejected items table goes here!!</p>*@
                    <table id="tblRejectedItems" class="display" cellspacing="0" style="width: 100%;"></table>

                </div>
                <div class="modal-footer">
                    @*<button type="button" id="btnRejectedItemsModalDownload" class="btn btn-default btn-primary pull-left disabled" >Download</button>*@
                    <a href="" type="button" id="btnRejectedItemsModalDownload" class="btn btn-default btn-primary pull-left disabled">Download</a>
                    @*<button type="button" id="btnRejectedItemsModalClose" class="btn btn-warning left" data-dismiss="modal">Close</button>*@
                    <a id="btnRejectedItemsModalClose" class="btn btn-warning left" href="/CSVUpload/RevisedUploadData/DbSummaryReport">Close</a>
                    <button type="button" id="btnRejectedItemsModalReupload" class="btn btn-success left disabled" >Re-Upload</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Test rows - hidden -->
    <!-- TEST row... -->
    @*<table class="hidden">
        <!-- TEST row... -->
        <tbody>
            <tr class="templateTableRow">
                <td class="col-md-6 text-center"><span style="font-size: 1.5em; font-weight: bold;" class="spanTableName">Test Table Name</span></td>

                <!-- If Inserted === 0 show span else show button -->
                <td class="col-md-2 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanInserted">0</span></td>
                <td class="col-md-2 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-success buttonInserted">100</button></td>

                <!-- If Updated === 0 show span else show button -->
                <td class="col-md-2 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanUpdated">0</span></td>
                <td class="col-md-2 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-primary buttonUpdated">50</button></td>

                <!-- If Rejected === 0 show span else show button -->
                <td class="col-md-2 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanRejected">0</span></td>
                <td class="col-md-2 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-danger buttonRejected">25</button></td>
            </tr>
            <tr class="templateTableRow">
                <td class="col-md-6 text-center"><span style="font-size: 1.5em; font-weight: bold;" class="spanTableName">Test Table Name</span></td>

                <!-- If Inserted === 0 show span else show button -->
                <td class="col-md-2 text-center hidden"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanInserted">0</span></td>
                <td class="col-md-2 text-center"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-success buttonInserted">100</button></td>

                <!-- If Updated === 0 show span else show button -->
                <td class="col-md-2 text-center hidden"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanUpdated">0</span></td>
                <td class="col-md-2 text-center"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-primary buttonUpdated">50</button></td>

                <!-- If Rejected === 0 show span else show button -->
                <td class="col-md-2 text-center hidden"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanRejected">0</span></td>
                <td class="col-md-2 text-center"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-danger buttonRejected">25</button></td>
            </tr>

            <!-- TEST row... -->
            <tr class="templateTableRow">
                <td class="col-md-6 text-center"><span style="font-size: 1.5em; font-weight: bold;" class="spanTableName">Test Table Name</span></td>

                <!-- If Inserted === 0 show span else show button -->
                <td class="col-md-2 text-center hidden"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanInserted">0</span></td>
                <td class="col-md-2 text-center"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-success buttonInserted">100</button></td>

                <!-- If Updated === 0 show span else show button -->
                <td class="col-md-2 text-center"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanUpdated">0</span></td>
                <td class="col-md-2 text-center hidden"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-primary buttonUpdated">50</button></td>

                <!-- If Rejected === 0 show span else show button -->
                <td class="col-md-2 text-center hidden"><span style="font-size: 1.5em; color: black; background-color: lightgray; vertical-align: -webkit-baseline-middle;" class="badge spanRejected">0</span></td>
                <td class="col-md-2 text-center"><button style="padding: 3px 7px; font-weight: bold;" class="btn btn-danger buttonRejected">25</button></td>
            </tr>
        </tbody>
    </table>*@

@section styles {
    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/css/DataTablesEditorCombo")
}


@section Scripts {
    @Scripts.Render("~/bundles/js/DataTablesEditorCombo")
}

    <script type="text/javascript">

        //A simple function to re-load updated items from the rejected items table
        function reloadRejectedItems(event) {
            //Retrieve 'data' variables
            if ('undefined' === typeof event.data || null === event.data) {
                return; //'data' variables not defined - return early
            }

            var currentUploadId = event.data.currentUploadId;
            var tableName = event.data.tableName;

            //Retrieve table data...
            var table = $('#' + 'tblRejectedItems').DataTable();
            var tableData = table.data();
            var tdLength = tableData.length;

            //Create updated data objects...
            var updateableData = [];
            for (var tdI = 0; tdI < tdLength; ++tdI) {
                var tData = tableData[tdI];
                var uData = {};

                if (tData.rowUpdated) {
                    for (var tKey in tData) {
                        //if ('rejectedRowId' === tKey || 'rowUpdated' === tKey) {
                        if ('rowUpdated' === tKey) {
                            continue;
                        }

                        if ('Item' === tKey) {
                            var tDataItem = tData[tKey];
                            for (var iKey in tDataItem) {
                                uData[iKey] = tDataItem[iKey];
                            }
                        }
                    }

                    updateableData.push({
                        "Item": uData,
                        //"RejectedRowId": tData.rejectedRowId });
                        "ItemId": tData.ItemId });
                }
            }

            //POST updated data to controller...
            var updateableItemsData = {
                "UploadId": currentUploadId,
                "TableName": tableName,
                "UpdateableItems": updateableData
            };

            var url = '/api/revisedupload/put/rejecteditems/';

            $.ajax({
                "url": url,
                "type": "PUT",
                "async": true,
                "contentType": "application/json",
                "data": JSON.stringify(updateableItemsData),
                "dataType": "json",
                "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                "success": function (data, textStatus, jqXHR) {
                    console.log('RevisedUpload PUT/rejecteditems success!!');
                    if ('undefined' !== typeof (data) && null !== data)
                    {
                        //Response received - verify uploadId...
                        var updateResults = data;
                        if (currentUploadId === updateResults.UploadId) {
                            //uploadId verified - scan table update results...
                            var tableUpdateResults = updateResults.TableUpdateResults;
                            var tLength = tableUpdateResults.length;

                            var tableUpdateResult = null;
                            for (var tI = 0; tI < tLength; ++tI) {
                                if (tableName === tableUpdateResults[tI].TableName) {
                                    //table update result found for current table - break
                                    tableUpdateResult = tableUpdateResults[tI];
                                    break;
                                }
                            }

                            if (null !== tableUpdateResult) {
                                //Update the rejected items table with the results of the db update...
                                updateRejectedItemsTable(tableUpdateResult);
                            }
                        }
                    }
                },
                "error": function (xmlhttprequest, textStatus, message) {
                    //Failure - Log messsage received from server...
                    console.log('RevisedUpload PUT/rejecteditems reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                }
            });

            //TO DO - update rejected items table per results received from controller...

            //TO DO - Disable re-upload button...
            //var button = $('#' + 'btnRejectedItemsModalReupload');
            //button.addClass('disabled');

            var n = 5;

            ++n;

        }

        //A simple function to format a 'child' table of errors for a DataTables row...
        function formatErrors(rowErrors) {
            var result = '';

            //Validate/initialize input parameter(s)...
            if ('undefined' !== typeof rowErrors && null !== rowErrors) {
                //Input parameter(s) valid - scan content, built table markup...
                result += '<table class="errorTable" cellpadding="5" cellspacing="0" border="0" style="padding-left:0.5em;">';

                //Scan input error string - create markup for each error...
                var reLength = rowErrors.length;
                for (var reI = 0; reI < reLength; ++reI) {
                    var rowError = rowErrors[reI];

                    result += '<tr>' +
                        '<td>&nbsp;' + rowError + '</td>' +
                        '</tr>';
                }

                result += '</table>';
            }

            //Processing complete - return result
            return result;
        }

        //Remove Rejected Items table row(s) per the input correct item ids... 
        function updateRejectedItemsTable(tableUpdateResult) {

            //Validate/initialize input parameters...
            if ('undefined' !== typeof tableUpdateResult && null !== tableUpdateResult) {
                //Input parameters valid - build row Ids array for correct, duplicate and edited items items...
                var rowIds = [];
                var keys = ['CorrectItemIds', 'DuplicateItemIds', 'EditedItemIds']
                var keysLength = keys.length;
                for (var kI = 0; kI < keysLength; ++kI) {
                    var currentKey = keys[kI];
                    var currentItemIds = tableUpdateResult[currentKey];
                    var cLength = currentItemIds.length;

                    for (var cI = 0; cI < cLength; ++cI) {
                        rowIds.push('#' + currentItemIds[cI].toString());
                    }
                }

                if (0 < rowIds.length) {
                    //Correct row ids exist - retrieve DataTables API...
                    var table = $('#' + 'tblRejectedItems').DataTable();

                    //For each correct row Id...
                    // NOTE: The function called by forEach(...) provides a closure for each rowId value...
                    // Source: http://www.datchley.name/loop-variable-gotcha/
                    rowIds.forEach(function (rowId, index) {
                        //Retrieve row <tr> element...
                        var row = table.row(rowId);
                        var node = row.node();

                        //Assign 'fade to' function to <tr> element
                        $(node).fadeTo(1500, 0.5, function () {
                            //Get the row again (due to other remove() calls, 'row' instance in outer scope may be invalid)
                            //For more information see: 
                            //  Bug: "Uncaught TypeError: Cannot read property '_aData' of undefined" when using row reference after removing other row #566
                            //  https://github.com/DataTables/DataTables/issues/566 
                            var myRow = table.row(rowId);
                            myRow.remove();        //DataTables Remove...
                            table.draw();
                        });
                    });
                }

                var incorrectItemIds = tableUpdateResult.IncorrectItemIds;
                var iLength = incorrectItemIds.length;
                rowIds = [];
                for (var iI = 0; iI < iLength; ++iI) {
                    rowIds.push('#' + incorrectItemIds[iI].toString());
                }

                if (0 < rowIds.length) {
                    //Incorrect row ids exist - retrieve DataTables API...
                    table = $('#' + 'tblRejectedItems').DataTable();

                    //For each incorrect row Id...
                    // NOTE: The function called by forEach(...) provides a closure for each rowId value...
                    // Source: http://www.datchley.name/loop-variable-gotcha/
                    rowIds.forEach(function (rowId, index) {
                        //Retrieve row <tr> element...
                        var row = table.row(rowId);
                        var rowData = row.data();
                        var itemId = rowData.ItemId;
                        var rowErrors = [];

                        //Retrieve error message(s), if any...
                        var statusMessages = tableUpdateResult.ErrorMessages;
                        var smLength = statusMessages.length;

                        for (var smI = 0; smI < smLength; ++smI) {
                            var statusMessage = statusMessages[smI];
                            if (statusMessage.IsError && (itemId === statusMessage.ItemId)) {
                                rowErrors.push(statusMessage.Message);
                            }
                        }

                        if (0 < rowErrors.length) {
                            //Error message(s) found, update child row markup
                            var markup = formatErrors(rowErrors);
                            row.child(markup);
                        }
                    });
                }
            }
        }

        function buildRejectedItemsTable(rejectedItemsData, readOnly) {

            //Validate/initialize input parameters... 
            if ('undefined' !== typeof rejectedItemsData && null !== rejectedItemsData &&
                'undefined' !== typeof readOnly && null !== readOnly) {

                //Build table data...
                var tblData = {
                    "columns": [
                        {
                            "className": "collapse-control",
                            "orderable": false,
                            "data": null,
                            "defaultContent": ""
                        },
                        {
                            //"data": "itemId",
                            "data": "ItemId",
                            "visible": false
                        },
                        {
                            "data": "rowUpdated",
                            "visible": false
                        }
                    ],
                    "data": [],
                    "editorFields": [],
                    "errors": {}
                };

                //Column definitions...
                var propertyNames = rejectedItemsData.RequiredPropertyNames.concat(rejectedItemsData.OptionalPropertyNames);
                var pnLength = propertyNames.length;
                for (pnI = 0; pnI < pnLength; ++pnI) {
                    var colDef = { "data": "", "title": "" };
                    var editorDef = {"label": "", "name": "", "type": (readOnly ? "readonly" : "text")};
                    var propertyName = propertyNames[pnI];

                    //colDef.data = propertyName;
                    colDef.data = 'Item.' + propertyName;
                    colDef.title = propertyName;
                    tblData.columns.push(colDef);

                    editorDef.label = propertyName;
                    //editorDef.name = propertyName;
                    editorDef.name = 'Item.' + propertyName;
                    tblData.editorFields.push(editorDef);
                }

                //Rejected items - add 'rejectedRowId' and 'rowUpdated' values to each data item...
                var rjLength = rejectedItemsData.RejectedItems.length;
                var rjItems = (readOnly && (rjLength > appConfig_InlineEditMaxRejectedItems)) ? 
                                                rejectedItemsData.RejectedItems.slice(0, appConfig_InlineEditMaxRejectedItems) :
                                                rejectedItemsData.RejectedItems
                var rjLength = rjItems.length;

                for (var rjI = 0; rjI < rjLength; ++rjI) {
                    var rjItem = rjItems[rjI];

                    //rjItem['rejectedRowId'] = rjI;  //NOTE: rejectedRowId value should match StatusMessage.RecordIndex
                    rjItem['rowUpdated'] = false;   //NOTE: true when any field is updated by user...
                }

                //Data...
                tblData.data = rjItems;

                //DataTables Editor 1.7.0 Configuration...
                var editor = new $.fn.dataTable.Editor({
                    "table": '#tblRejectedItems',
                    "fields": tblData.editorFields,
                    //"idSrc": "rejectedRowId",
                    "idSrc": "ItemId",
                    "display": "bootstrap",  //Display main editing form in Bootstrap modal dialog...
                    //Apply changes locally only...
                    "ajax": function (method,      //Legacy parameter - should be null
                                        url,         //Legacy parameter - should be null 
                                        data,        //Data to send to server...
                                        success,    //Success callback accepting data returned from the server.  Signature: success({ "data": [<data object(s)>] })
                                        error) {    //Error callback for server errors (not validation errors!!). Signature: error(xhr, error, thrown)  
                        //For now - update the table data...
                        var tblObjs = tblData.data;
                        var length = tblObjs.length;

                        //For each table data object...
                        for (var i = 0; i < length; ++i) {
                            var tblObj = tblObjs[i];

                            //For each input data object...
                            var dataObjs = data.data;
                            for (var key in dataObjs) {
                                if (key == tblObj.ItemId) {
                                    //Match on unique Id...

                                    //Assign input data object 'Item' values to table data object 'Item'  
                                    var dataObj = dataObjs[key];
                                    for (var dKey in dataObj) {
                                        //if ('rejectedRowId' !== dKey && 'rowUpdated' !== dKey) {
                                        //    tblObj[dKey] = dataObj[dKey];
                                        //}
                                        if ('Item' === dKey) {
                                            var itemDataObj = dataObj[dKey];
                                            var itemTblObj = tblObj[dKey];
                                            for (var iKey in itemDataObj) {
                                                itemTblObj[iKey] = itemDataObj[iKey];
                                        }
                                    }
                                    }

                                    //Set 'updated' field in table and data objects...
                                    dataObj['rowUpdated'] = true;
                                    tblObj['rowUpdated'] = true;

                                    //Enable re-upload button...
                                    var button = $('#' + 'btnRejectedItemsModalReupload');
                                    button.removeClass('disabled');

                                    //Initialize 'from server' data, call success function...
                                    var fromServer = { "data": [tblObj] };
                                    success(fromServer); 
                                    break;
                                }
                            }
                        }
                    },
                    "formOptions": {
                        "inline": {
                            "submit": "allIfChanged",
                            "onBlur": "submit"
                        }
                    }
                });

                //DataTables 1.10.16 Configuration...
                var newTable = $('#tblRejectedItems').DataTable({
                    //"dom": "Bfrtip",
                    "dom": "frtip",
                    "data": tblData.data,
                    //"rowId": "rejectedRowId",
                    "rowId": "ItemId",
                    "columns": tblData.columns,
                    "select": { "style": "os" },
                    "keys": {
                        "columns": ":not(.collapse-control)",
                        "keys": [9],
                        "editor": editor,
                        "editOnFocus": true
                    },
                    "scrollX": true,
                    "scrollY": "30em"//,
                    //"buttons": [
                    //    { "extend": "create", "editor": editor },
                    //    { "extend": "edit", "editor": editor },
                    //    { "extend": "remove", "editor": editor }
                    //]
                });

                //Click handler for 'collapse control' column...
                $('table#tblRejectedItems > tbody').on('click', 'td.collapse-control', function () {
                    //Retrieve row data...
                    var tr = $(this).closest('tr');
                    var row = newTable.row(tr);

                    if (row.child.isShown()) {
                        //Child row open, close...
                        row.child.hide();
                        tr.removeClass('shown');
                    }
                    else {
                        // Child row closed, open...
                        if ('undefined' === typeof (row.child())) {
                            //No child rows - retrieve row errors from StatusMessages... 
                            var rowData = row.data();
                            var itemId = rowData.ItemId;
                            var rowErrors = [];

                            var statusMessages = rejectedItemsData.StatusMessages;
                            var smLength = statusMessages.length;

                            for (var smI = 0; smI < smLength; ++smI) {
                                var statusMessage = statusMessages[smI];
                                if (statusMessage.IsError && (itemId === statusMessage.ItemId)) {
                                    rowErrors.push(statusMessage.Message);
                                }
                            }

                            //Format errors...
                            var markup = formatErrors(rowErrors);

                            //Set child row markup...
                            row.child(markup);
                        }

                        //Open child row, show errors...
                        row.child.show();
                        tr.addClass('shown');
                    }
                });
            }

        }

        //Shown handler for rejected items dialog...
        function shownRejectedItems(event) {

            //Retrieve upload Id and  rejected items table name...
            var currentUploadId = sessionStorage.currentUploadId;
            var tableName = sessionStorage.currentRejectedItemsTableName;

            if ('undefined' !== currentUploadId && null !== currentUploadId &&
                'undefined' !== typeof tableName && null !== tableName) {
                //Display table name...
                $('#' + 'spanRejectedItemsTitle').text(tableName);

                //Set re-upload button 'click' handler...
                var button = $('#' + 'btnRejectedItemsModalReupload');
                button.off('click', reloadRejectedItems);
                button.on('click', { "currentUploadId": currentUploadId, "tableName": tableName }, reloadRejectedItems);

                var anchor = $('#' + 'btnRejectedItemsModalDownload');
                anchor.removeClass('disabled');
                anchor.attr('href', '/api/revisedupload/get/rejecteditemsfile/' + currentUploadId + '/' + tableName + '/')
                
                //Retrieve rejected items for display...
                var url = '/api/revisedupload/get/rejecteditems/' + currentUploadId + '/' +  tableName + '/';

                $.ajax({
                    "url": url,
                    "type": "GET",
                    "async": true,
                    "dataType": "json",
                    "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                    "success": function (data, textStatus, jqXHR) {
                        console.log('RevisedUpload GET/rejecteditems success!!');
                        var rejectedItemsData = data;

                        var rjItems = rejectedItemsData.RejectedItems;
                        var rjLength = rjItems.length;

                        if (rjLength <= appConfig_InlineEditMaxRejectedItems) {
                            //Rejected items within inline editing limit - build/display table..
                            //$('#' + 'tblRejectedItems_wrapper').removeClass('hidden');
                            $('#' + 'tblRejectedItemsAlert').addClass('hidden');
                            $('#' + 'btnRejectedItemsModalReupload').removeClass('hidden');
                            buildRejectedItemsTable(rejectedItemsData, false);
                        }
                        else {
                            //Rejected items beyond inline editing limit - hide table/display alert...
                            //$('#' + 'tblRejectedItems_wrapper').addClass('hidden');
                            $('#' + 'tblRejectedItemsAlert').removeClass('hidden');
                            $('#' + 'btnRejectedItemsModalReupload').addClass('hidden');
                            buildRejectedItemsTable(rejectedItemsData, true);
                        }

                        var n = 5;

                        ++n;
                    },
                    "error": function (xmlhttprequest, textStatus, message) {
                        //Failure - Log messsage received from server...
                        console.log('RevisedUpload GET/rejecteditems reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                    }
                });
            }
        }

        //Hidden handler for rejected items dialog...
        function hiddenRejectedItems(event) {
            //Upon close of the dialog - destroy the DataTables instance...

            var tableId = 'tblRejectedItems';
            if ($.fn.DataTable.isDataTable('#' + tableId)) {
                //Retrieve the DataTables API...
                var tableApi = $('#' + tableId).DataTable();

                ////Disable the key table instance
                //var keysApi = tableApi.keys;
                //keysApi.disable();

                ////What does the Select API allow?
                //var selectApi = tableApi.select();
                ////selectApi.destroy();      //If called, next attempt to build runs OK but shows nothing...
                ////selectApi.clear();        //If called, no effect on problem
                ////selectApi.init();         //If called, no effect on problem

                //Retrieve and destroy the editor instance...
                var editor = tableApi.editor();
                editor.destroy();

                //Clear, draw and destroy the DataTables instance...
                tableApi.clear();
                tableApi.draw();
                tableApi.destroy();

                //Remove various table elements not removed by DataTables code...
                //NOTE: If these elements are left in place, creating another DataTables 'tblRejectedItems' instance
                //       for a different data type (different column headers) encounters errors
                $('#' + tableId + ' thead tr');                     //Table header table row...
                $('#' + tableId + ' tbody').remove();               //Table body...
                $('#' + tableId + ' thead').remove();               //Table header...
                $('#' + tableId).removeClass('no-footer');          //'no-footer' class
                $('#' + tableId).removeAttr('role');                //'role' attribute
                $('#' + tableId).removeAttr('aria-describedby');    //'aria-describedby' attribute
                $('#' + tableId).css('position', '');               //CSS style attribute: 'position'
            }
        }

    //Add table rows for db load results...
    function buildSummaryReportMarkup(tableDivId, dbLoadResults) {
        //Validate/initialize input parameters...
        if (('undefined' !== typeof tableDivId && null != tableDivId) &&
            ('undefined' !== typeof dbLoadResults && null != dbLoadResults)) {

            //Input parameters valid - select table and clear contents, if any...
            var jqSumRptTable = $('div#' + tableDivId + ' table tbody');
                var jsSumRptRowTemplate = $('.templateTableRow');

            jqSumRptTable.empty();

            //For each db load result...
            var length = dbLoadResults.length;
            for (var i = 0; i < length; ++i) {
                var dbLoadResult = dbLoadResults[i];

                //Clone table row template...
                var newTableRow = jsSumRptRowTemplate.clone();
                newTableRow.removeClass('hidden');
                //Set table name column
                    var tableName = dbLoadResult.TableName;
                    newTableRow.find('.spanTableName').text(tableName);

                //Set remaining columns...
                //Note: For Razor code blocks within <script> tags, mark JavaScript with '<at sign>:' symbol
                //Source: https://stackoverflow.com/questions/5614941/mix-razor-and-javascript-code
@if ("meta_data" == qualifier)
{
                @:var columns = ['Inserted', 'Updated', 'Duplicated', 'Rejected'];
}
else
{
                @:var columns = ['Inserted', 'Rejected'];
}
                var columnsLength = columns.length;

                //For each remaining column...
                for (var cI = 0; cI < columnsLength; ++cI) {
                    var column = columns[cI];
                    var tempSpan = newTableRow.find('.span' + column);
                    var tempButton = newTableRow.find('.button' + column);

                    //Hide each parent 'td'
                    tempSpan.parent().addClass('hidden');
                    tempButton.parent().addClass('hidden');

                    //Set/show column per associated db load count value...
                    var loadCount = dbLoadResult.LoadCounts[column];
                    if (0 < loadCount && 'Rejected' === column) {
                        //Positive count, Rejected Column - set and show the button
                        tempButton.text(loadCount);
                        tempButton.parent().removeClass('hidden');

                        //Add click handler to write associated table name to session storage...
                        tempButton.on('click', function (event) {
                            //From the current <button> tag navigate to the containing <tr> tag...
                            var parent = $(this).parent();          //<td> tag
                            var grandparent = $(parent).parent()    //<tr> tag

                                                //Find the descendant span containing the table name...
                            var span = $(grandparent).find('span.spanTableName');
                            var tblName = span.text();

                            sessionStorage.currentRejectedItemsTableName = tblName;
                        });
                    }
                    else {
                            //Zero count --OR-- Inserted or Updated column - set and show the span
                        tempSpan.text(loadCount);
                        tempSpan.parent().removeClass('hidden');
                    }
                }

                //Append row to table...
                jqSumRptTable.append(newTableRow);
            }
        }
    }

    //Retrieve DB Load Results Report values for the input uploadId...
    function getDbLoadResults(currentUploadId) {
        //Validate/initialize input parameters...
        if ('undefined' !== typeof currentUploadId && null !== currentUploadId) {
            //Input parameters valid - set url...
            var url = '/api/revisedupload/get/dbloadresults/' + currentUploadId + '/';

            $.ajax({
                "url": url,
                "type": "GET",
                "async": true,
                "dataType": "json",
                "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                "success": function (data, textStatus, jqXHR) {
                    console.log('RevisedUpload GET/dbloadresults success!!');
                    var dbLoadResults = data;
                    var length = dbLoadResults.length;
                    console.log('getDbLoadResults(...) dbLoadResults.length = ' + length);
                    for (var i = 0; i < length; ++i) {
                        console.log("Load results for: " + dbLoadResults[i].TableName);
                    }

                    //Display db load results...
                    buildSummaryReportMarkup('divDbLoadResults', dbLoadResults);
                },
                "error": function (xmlhttprequest, textStatus, message) {
                    //Failure - Log messsage received from server...
                    console.log('RevisedUpload GET/dbloadresults reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                }
            });
        }
    }

    //Request removal of the uploadId...
    function removeUploadId(currentUploadId) {
        //Validate/initialize input parameters...
        if ('undefined' !== typeof currentUploadId && null !== currentUploadId) {
            //Input parameters valid - set url...
            var url = '/api/revisedupload/delete/uploadId/' + currentUploadId + '/';

            $.ajax({
                "url": url,
                "type": "DELETE",
                "async": true,
                "dataType": "json",
                "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                "success": function (data, textStatus, jqXHR) {
                    console.log('RevisedUpload DELETE/uploadId success!!');

                    //Redirect to home page, after a brief delay...
                    setTimeout(function () {
                        //window.location.href = "/home/index"
                        window.location.href = "/CSVUpload/RevisedUploadData/SelectUploadType"
                    }, 1000);
                },
                "error": function (xmlhttprequest, textStatus, message) {
                    //Failure - Log messsage received from server...
                    console.log('RevisedUpload DELETE/uploadId reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                }
            });
            }
    }

    $(document).ready(function () {
        console.log('DB Summary Report - document ready called!!');

        //Retrieve current upload Id...
        var currentUploadId = sessionStorage.currentUploadId;
        console.log('DB Summary Report retrieves upload Id: ' + currentUploadId);

            //'Click' handler for Finish 'anchor'
        $('a.cancel').on('click', function (event) {
            //Clear session storage items...
            sessionStorage.removeItem('currentUploadId');
            sessionStorage.removeItem('uploadedFileNames');
            sessionStorage.removeItem('fileUploadCount');

            //Queue remove request to server...
            removeUploadId(currentUploadId);
        });

        //Queue retrieval of db load results...
        setTimeout(function () {
            getDbLoadResults(currentUploadId);
        }, 100);

            //Set 'shown' and 'hidden' handlers for rejected items dialog
            $('#' + 'rejectedItemsModal').on('shown.bs.modal', shownRejectedItems);
            $('#' + 'rejectedItemsModal').on('hidden.bs.modal', hiddenRejectedItems);
    });

    </script>


    </div>