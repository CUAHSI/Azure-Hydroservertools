
@{
    ViewBag.Title = "DragAndDropFiles";
    ViewBag.Name = "dragAndDropFiles";

    string qualifier = TempData.Peek("qualifier") as string;

    Layout = "~/Views/Shared/_LayoutBasic.cshtml";
}
<link rel="stylesheet" href="~/Content/mvcfileupload/blueimp/jquery.fileupload.css" />

@if ("meta_data" == qualifier)
{
    <h2>Upload Metadata</h2>
}
else
{
    <h2>Upload Data Values</h2>
}

<div class="container">

    <!-- List of 'to-be-uploaded' file references -->
    <div class="row">
        <div class="col-md-12">
            <div id="divFilesForUpload" class="uploader">
                <div><span class="glyphicon glyphicon-cloud-upload"></span>&nbsp; Drag &amp; Drop</div>
                <ul id="lstFilesForUpload" class="list-group" style="">
                    <!--NOTE: The list items added here should look like...
                        <li class="list-group-item">Dapibus ac facilisis in</li>
                    -->
                </ul>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="btn-group col-md-12" style="position: relative;">
            <div class="fileinput-button pull-left">
                <button type="button" class="btn btn-primary"><span class="glyphicon glyphicon-plus"></span>&nbsp;Add Files</button>
                <input id="inpFilesForUpload" type="file" multiple="multiple" class="required" name="fileupload" accept=".csv,.zip" />
            </div>
            <div id="alertFileUpload" class="alert alert-info fade in hidden col-md-5 col-md-offset-3" role="alert">
                <span class="glyphicon glyphicon-refresh spin"></span>
                <span>File upload in progress.  Please do not close the current page!!</span>
            </div>
            <div class="pull-right">
                <a href="/home/index" class="btn btn-warning cancel">Cancel</a>
                <!-- Need a button here - not a link - to keep the current page in place so to ensure all file 'chunks' make it to the server... -->
                <button type="button" id="btnFilesForUploadContinue" class="btn btn-success" style="margin-left: 0.5em;">Begin Upload</button>
                <a id="btnValidationSummary" class="btn btn-primary hidden" href="/CSVUpload/RevisedUploadData/ValidateFiles" style="margin-left: 0.5em;">Continue</a>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/mvcfileupload/blueimp/jquery.fileupload.js"></script>
<script src="~/Scripts/mvcfileupload/blueimp/jquery.fileupload-ui.js"></script>
<script src="~/Scripts/mvcfileupload/blueimp/jquery.iframe-transport.js"></script>
<script src="~/Scripts/mvcfileupload/blueimp/jquery.fileupload-process.js"></script>
<script src="~/Scripts/custom/RandomId.js"></script>
<script src="~/Scripts/custom/revisedUploadUtils.js"></script>
<script src="~/Scripts/custom/workerMonitor.js"></script>

<style type="text/css">
    .bar {
        background-color: #4298c8;
    }
</style>

<script type="text/javascript">
    var fileObjectsForUpload = [];
    var currentUploadId = null;
    var randomId = null;

    var workerValidation = null;
    var workerMonitorValidation = null;

    //Click handler for list item Delete button...
    function deleteListItem(event) {
        //Retrieve file name attribute - remove list element
        var fileName = $(this).attr('data-file-name');
        $(this).parent().remove();

        //Remove/update associated sessionStorage items, if applicable..
        if ('undefined' !== typeof sessionStorage.uploadedFileNames && null !== sessionStorage.uploadedFileNames) {
            //Uploaded file names...
            var uploadedFileNames = (sessionStorage.uploadedFileNames).split(',');

            var index = uploadedFileNames.indexOf(fileName);
            if (-1 !== index) {
                uploadedFileNames.splice(index, 1);
                if (0 < uploadedFileNames.length) {
                    //File names NOT empty - retain in session storage...
                    sessionStorage.uploadedFileNames = uploadedFileNames.toString();
                }
                else {
                    //File names empty - remove from session storage
                    sessionStorage.removeItem('uploadedFileNames');
                }

                if ('undefined' !== typeof sessionStorage.fileUploadCount && null !== sessionStorage.fileUploadCount) {
                    //File upload count
                    var fileUploadCount = parseInt(sessionStorage.fileUploadCount);
                    sessionStorage.fileUploadCount = (--fileUploadCount).toString();
                }
            }
        }

        //Remove the associated file object, if applicable...
        var foLength = fileObjectsForUpload.length;
        for (var foI = 0; foI < foLength; ++foI) {
            var fo = fileObjectsForUpload[foI];
            if (fileName === fo.name) {
                fileObjectsForUpload.splice(foI, 1);
                break;
            }
        }

        //Forward delete request to server, if indicated...
        if (null !== currentUploadId) {
            var url = '/api/revisedupload/delete/file/' + currentUploadId + '/' + fileName + '/';
            $.ajax({
                "url": url,
                "type": "DELETE",
                "async": true,
                "dataType": "json",
                "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                "success": function (data, textStatus, jqXHR) {
                    console.log('RevisedUpload Delete/File success: "' + textStatus + '" (' + jqXHR.status.toString() + ')');
                    //if (200 === jqXHR.status || 206 === jqXHR.status) {
                    //    //Controller file processing complete - show Validation Summary button...
                    //    $('#' + 'alertFileUpload').fadeOut({
                    //        "duration": 1500,
                    //        "complete": function () {
                    //            $('#' + 'btnValidationSummary').removeClass('hidden');
                    //            ////BC - TEST - Click button as soon as shown to test possible timing issue...
                    //            //$('#' + 'btnValidationSummary')[0].click();
                    //        }
                    //    });
                    //    clearInterval(interval);
                    //}
                },
                "error": function (xmlhttprequest, textStatus, message) {
                    //Failure - Log messsage received from server...
                    console.log('RevisedUpload Delete/File reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                    //clearInterval(interval);
                }
            });
        }
    }

    //Add unique input candidate file objects to the input collection and (name) to markup list...
    function addFileObjects( candidateFileObjs, collectionFileObjs, lstMarkup) {
        if ('undefined' !== typeof candidateFileObjs && null !== candidateFileObjs &&
            'undefined' !== typeof collectionFileObjs && null !== collectionFileObjs &&
            'undefined' !== typeof lstMarkup && null !== lstMarkup) {

            //For each input candidate...
            $.each(candidateFileObjs, function (index, file) {
                //Check for presence in collection...
                var bFound = false;
                $.each(collectionFileObjs, function (indexCol, fileCol) {
                    if (file.name.toLowerCase() === fileCol.name.toLowerCase() &&
                        file.size === fileCol.size) {
                        bFound = true;  //Found - set indicator, return early...
                        return false;
                    }
                });

                if (!bFound) {
                    //Candidate not found - add to collection...
                    collectionFileObjs.push(file);

                    //Append to markup...
                    //Possbile data-upload-status values: "notStarted", "inProgress", "complete", "error"
                    //Possbile data-validation-status values: "notStarted", "inProgress", "complete", "error"
                    lstMarkup.append('<li class="list-group-item" data-file="' + file.name + '" data-upload-status="notStarted" data-validation-status="notStarted">' +
                        '<span style="width: 40%; position: relative; float: left; font-size: 0.75em; margin-top: 0.25em;">' + file.name + '</span>' +

                        '<div class="progress invisible" style="width: 45%; display: inline-block; margin-bottom: 0;">' +
                            '<div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%; display:inline-block;">' +
                                '0%' +
                            '</div>' +
                        '</div>' +

                        //'<div class="status" style="width: 20%; display: inline-block; ">Not started...</div>' +
                        //'<div class="status" style="width: 15%; display: inline-block; font-size: 0.75em;"></div>' +

                        '<button class="btn btn-danger delete" style=" width: 10%; position: relative; float: right;" data-file-name="' + file.name + '">Remove</button>' +

                        '</li>');


                    //Enable button...
                    $('#' + 'btnFilesForUploadContinue').removeClass('disabled');
                }
            });

            //Set click handler for list item delete button(s)...
            var deleteButtons = $('#' + 'lstFilesForUpload li button.delete');

            deleteButtons.off('click', deleteListItem);
            deleteButtons.on('click', deleteListItem);
        }
    }

    //Scan input file names collection, add (names) to markup list...
    //ASSUMPTION: all referenced files are currently loaded on the server...
    function loadFileNames(collectionFileNames, lstMarkup) {
        if ('undefined' !== typeof collectionFileNames && null !== collectionFileNames &&
            'undefined' !== typeof lstMarkup && null !== lstMarkup) {

            //For each input file object...
            $.each(collectionFileNames, function (index, fileName) {
                //Append to markup...
                lstMarkup.append('<li class="list-group-item" data-file="' + fileName + '" data-upload-status="complete" data-validation-status="complete">' +
                    '<span style="width: 40%; position: relative; float: left; font-size: 0.75em; margin-top: 0.25em;">' + fileName + '</span>' +

                    '<div class="progress" style="width: 45%; display: inline-block; margin-bottom: 0;">' +
                        '<div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 100%; display:inline-block;">' +
                            'Complete' +
                        '</div>' +
                    '</div>' +

                    //'<div class="status" style="width: 20%; display: inline-block; ">Complete!!!</div>' +

                    '<button class="btn btn-danger delete" style=" width: 10%; position: relative; float: right;" data-file-name="' + fileName + '">Remove</button>' +

                    '</li>');
            });

            //Set click handler for list item delete button(s)...
            var deleteButtons = $('#' + 'lstFilesForUpload li button.delete');

            deleteButtons.off('click', deleteListItem);
            deleteButtons.on('click', deleteListItem);
        }
    }

    //Send a request via the input worker monitor to validate the input file name
    function requestFileValidation(uploadId, fileName, workerMonitor, jqProgressWrapper, jqProgressBar) {
        //Validate/initialize input parameters...
        if ('undefined' !== typeof uploadId && null !== uploadId &&
            'undefined' !== typeof fileName && null !== fileName &&
            'undefined' !== typeof workerMonitor && null !== workerMonitor &&
            'undefined' !== typeof jqProgressWrapper && null !== jqProgressWrapper &&
            'undefined' !== typeof jqProgressBar && null !== jqProgressBar) {
            //Input parameters valid - update progress bar for file validation...

            //Fade out, make some changes, fade in...
            jqProgressBar.fadeOut(1500, function () {
                jqProgressWrapper.addClass('active progress-striped');    //Animated stripes
                jqProgressBar.removeClass('progress-bar-info');           //Change color
                jqProgressBar.addClass('progress-bar-success');
                jqProgressBar.text('File validation in progress...');     //Update text
                jqProgressBar.fadeIn(1500, function () {
                    //Request to worker for file validation results...
                    var request = {
                        "requestId": uploadId + "_" + fileName,
                        "inputData": {
                            "action": "get",
                            "uploadId": currentUploadId
                        }
                    };

                    var promise = workerMonitor.sendWorkerMessage(request);
                    if (null !== promise) {
                        //Request submitted - set promise's 'then' and 'catch'
                        promise.then(function (message) {
                            console.log('requestFileValidation(' + fileName + ') - Validation success!!!');
                            jqProgressWrapper.removeClass('active');    //Stop progress-bar animation 
                            var namesToResults = message.outputData.fileNamesToValidationResults;

                            var bFound = false;
                            var bError = false;
                            for (var fn in namesToResults) {
                                var validationResults = namesToResults[fn];
                                if (fileName === fn) {
                                    //Validation results found - display outcome...
                                    bFound = true;

                                    var typeName = validationResults.CandidateTypeName;
                                    var recordCount = validationResults.CandidateRecordCount;
                                    var invalidHeadersCount = validationResults.InvalidHeaderNames.length;
                                    var missingHeadersCount = validationResults.MissingRequiredHeaderNames.length;

                                    var validationMessage = '';

                                    if (0 < typeName.length && 'unknown' !== typeName.toLowerCase() ) {
                                        //Known type - check record count...
                                        if (0 < recordCount) {
                                            //Records exist - successful validation
                                            validationMessage = 'Validates as model: ' + typeName + ' with ' + recordCount + ' record(s).'
                                        }
                                        else {
                                            //No records exist - check for error...
                                            bError = true;
                                            if (0 < invalidHeadersCount) {
                                                validationMessage = 'Validates as model: ' + typeName + ' with ' + invalidHeadersCount + ' invalid column name(s).'
                                            }
                                            else if (0 < missingHeadersCount) {
                                                validationMessage = 'Validates as model: ' + typeName + ' with ' + missingHeadersCount + ' missing column name(s).'
                                            }
                                            else {
                                                validationMessage = 'Validates as model: ' + typeName + ' with ' + recordCount + ' record(s).'
                                            }
                                        }
                                    }
                                    else {
                                        //Error - unknown type...
                                        bError = true;
                                        validationMessage = 'Cannot establish model type.'
                                    }

                                    jqProgressBar.text(validationMessage);
                                    break;
                                }
                            }

                            if (!bFound) {
                                //Validation results not found...
                                bError = true;

                                jqProgressBar.text('Cannot find validation results.');
                            }

                            if (bError) {
                                //Error exists - change progress bar color...
                                jqProgressBar.removeClass('progress-bar-success');
                                jqProgressBar.addClass('progress-bar-danger');
                            }

                        }).catch(function (message) {
                            jqProgressWrapper.removeClass('active');    //Stop progress-bar animation 
                            var outputData = message.outputData;
                            var errorMsg = message.message;
                            if ('undefined' !== typeof outputData && null !== outputData) {
                                console.log('requestFileValidation(' + fileName + ') - server error: ' + outputData.statusText);
                            }
                            else if ('undefined' !== typeof errorMsg && null !== errorMsg) {
                                console.log('requestFileValidation(' + fileName + ') - error: ' + errorMsg);
                            }
                            else {
                                console.log('requestFileValidation(' + fileName + ') - unspecified error.');
                            }
                        });
                    }
                });
            });
        }
    }

    $(document).ready(function () {

        //Hide the upload file alert...
        $('#' + 'alertFileUpload').removeClass('hidden').hide();

        //Check session storage for existing items...
        if ('undefined' !== typeof sessionStorage.currentUploadId && null != sessionStorage.currentUploadId) {
            currentUploadId = sessionStorage.currentUploadId;   //Retrieve current upload Id...
        }

        if ('undefined' !== typeof sessionStorage.uploadedFileNames && null !== sessionStorage.uploadedFileNames) {
            var uploadedFileNames = sessionStorage.uploadedFileNames;
            loadFileNames(uploadedFileNames.split(','), $('#' + 'lstFilesForUpload'));  //Retrieve uploaded file names...

            //Assumption - uploaded file names exist because file(s) were previously uploaded - show validation summary button...
            $('#' + 'btnValidationSummary').removeClass('hidden');
        }

        //Initialization code for jQuery-File-Upload...
        var dropDiv = $('#' + 'divFilesForUpload');
        dropDiv.fileupload(
            {
                //Identifiers/operating values...
                "dataType": "json",
                "dropZone": dropDiv,
                //"maxChunkSize": 10000,              //Relatively small value for testing purposes...
                "maxChunkSize": 8388608,              //Production value (2^23)
                //Upload-related...
                "autoUpload": false,
                "multipart": true,                  //Send uploads as multipart/form-data
                "type": "POST",
                "url": "/api/revisedupload/post",
                "singleFileUploads": true,          //Upload each file in a separate XHR request
                //"sequentialUploads": true,        //Issue file upload requests in a sequential order
                "sequentialUploads": false,         //Issue file upload requests simultaneously
                "limitConcurrentUploads": 20,       //Limit the number of concurrent uploads
                //Callbacks...
                "add": function(event, data) {
                    //File(s) added for upload - check event type...
                    if ('undefined' !== typeof event.originalEvent && null !== event.originalEvent) {
                        if ('add' === event.originalEvent.type.toLowerCase() &&
                            (!event.originalEvent.delegatedEvent)) {
                            //Event is a call to jquery-file-upload 'add' method (NOT a file 'drop' or 'browse')

                            //Submit current data to server...
                            data.submit();
                        }
                    }
                },
                "submit": function (event, data) {
                    //Include file names as 'form' data...
                    var fileNamesAndTypes = [];
                    if (0 < fileObjectsForUpload.length) {
                        //List entries exist - retrieve file names as 'form' data...
                        $.each(fileObjectsForUpload, function (index, file) {
                            fileNamesAndTypes.push({
                                "fileName": file.name,
                                "fileType": file.type
                            });
                        });
                    }

                    //Send current data to server (start the upload manually)...
                    data.formData = {
                        "fileNamesAndTypes": JSON.stringify(fileNamesAndTypes),
                        "currentUploadId": currentUploadId,
                        "validationQualifier": "@qualifier"
                    };

                    var dropDiv = $('#' + 'divFilesForUpload');
                    dropDiv.fileupload('send', data);

                    //Return false to stop the submit call from starting the upload....
                    return false;
                },
                ////File 'chunk' callbacks...
                //"chunkalways": function(event, data) {
                //    console.log('jquery-file-upload - chunkalways called!!');
                //    var n = 5;

                //    ++n;
                //},
                //"chunkdone": function(event, data) {
                //    console.log('jquery-file-upload - chunkdone called!!');
                //    var n = 5;

                //    ++n;
                //},
                "chunkfail": function(event, data) {
                    console.log('jquery-file-upload - chunkfail called!!');
                    var n = 5;

                    ++n;
                },
                //"chunksend": function(event, data) {
                //    console.log('jquery-file-upload - chunksend called!!');
                //    var n = 5;

                //    ++n;
                //},
                //File upload callbacks...
                "always": function (event, data) {
                    console.log('jquery-file-upload - always called!!');

                    //Check for final status ('completed' or 'error') on all list items...
                    var final = true;   //Assume all statuses are final
                    var listItems = '#' + 'lstFilesForUpload' + ' li';

                    $(listItems).each(function (index) {
                        var attrStatusValue = $(this).attr('data-upload-status').toLowerCase();

                        if ((-1 === attrStatusValue.indexOf('complete')) &&
                            (-1 === attrStatusValue.indexOf('error'))) {
                            final = false;
                        }
                    });

                    if (final) {
                    //    //Final status for all list items - show Validation Summary button...
                    //    //NOTE: Controller may not yet be done with file processing -
                    //    //      user must keep current page open until all controller processing is done
                    //    var url = '/api/revisedupload/get/' + currentUploadId + '/';
                    //    var interval = setInterval(function () {
                    //        $.ajax({
                    //            "url": url,
                    //            "type": "GET",
                    //            "async": true,
                    //            "dataType": "json",
                    //            "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                    //            "success": function (data, textStatus, jqXHR) {
                    //                console.log('RevisedUpload GET success: "' + textStatus + '" (' + jqXHR.status.toString() + ')');
                    //                if (200 === jqXHR.status || 206 === jqXHR.status) {
                    //                    //Controller file processing complete - fade out file upload alert...
                                        $('#' + 'alertFileUpload').fadeOut({
                                            "duration": 1000,
                                            "complete": function () {
                                                //Show Validation Summary button...
                                                $('#' + 'btnValidationSummary').removeClass('hidden');
                                                ////BC - TEST - Click button as soon as shown to test possible timing issue...
                                                //$('#' + 'btnValidationSummary')[0].click();
                                            }
                                        });
                    //                    clearInterval(interval);
                    //                }
                    //            },
                    //            "error": function (xmlhttprequest, textStatus, message) {
                    //                //Failure - Log messsage received from server...
                    //                console.log('RevisedUpload GET reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                    //                clearInterval(interval);
                    //            }
                    //        });

                    //    }, 1000);
                    }
                },
                "done": function (event, data) {
                    console.log('jquery-file-upload - done called!!');
                    var n = 5;

                    ++n;
                },
                "fail": function (event, data) {
                    console.log('jquery-file-upload - fail called!!');

                    //Update status for associated list entry...
                    var fileName = data.files[0].name;
                    var listItem = '#' + 'lstFilesForUpload' + ' li[data-file="' + fileName + '"]';

                    var divBar = $(listItem + ' .bar');
                    var divPercent = $(listItem + ' .percent');
                    var divProgressBar = $(listItem + ' .progress-bar');

                    divBar.width('100%');
                    divPercent.html('Error');

                    divProgressBar.addClass('bg-danger');

                    //Set error status...
                    $(listItem).attr('data-upload-status', 'error');
                },
                //"send": function (event, data) {
                //    console.log('jquery-file-upload - send called!!');
                //    var n = 5;

                //    ++n;
                //},
                "progress": function (event, data) {
                    var fileName = data.files[0].name;
                    //var percentage = (parseInt((data.loaded / data.total) * 100, 10)).toLocaleString();  //Rounds to the nearest whole number...
                    var percentage = Math.round((data.loaded / data.total) * 100);                         //Rounds to the nearest whole number...

                    //console.log('jquery-file-upload - progress called for: ' + fileName + ' at ' + percentage.toString() + '% !!');

                    //Update list item...
                    var listItem = '#' + 'lstFilesForUpload' + ' li[data-file="' + fileName + '"]';

                    //var divBar = $(listItem + ' .bar');
                    //var divPercent = $(listItem + ' .percent');
                    var progressWrapper = $(listItem + ' .progress');
                    var progressBar = $(listItem + ' .progress-bar');

                    progressWrapper.removeClass('invisible');
                    //divBar.width(percentage + '%');
                    //divPercent.html(percentage + '%');
                    progressBar.width(percentage.toString() + '%');
                    //progressBar.text(percentage.toString()  + '%');
                    progressBar.text('File Upload: ' + percentage.toString() + '%');

                    if ( 100 > percentage) {
                        $(listItem).attr('data-upload-status', 'inProgress');   //Not yet completed...
                    }
                    else {
                        //Upload complete - update session state variables...
                        $(listItem).attr('data-upload-status', 'complete');
                        progressBar.text('File Upload: Complete');

                        var fileUploadCount = 0;
                        var uploadedFileNames = [];

                        //Retrieve/update file upload count
                        if ('undefined' !== typeof sessionStorage.fileUploadCount && null !== sessionStorage.fileUploadCount) {
                            fileUploadCount = parseInt(sessionStorage.fileUploadCount);
                        }
                        sessionStorage.fileUploadCount = (++fileUploadCount).toString();

                        //Retrieve/update file names array...
                        if ('undefined' !== typeof sessionStorage.uploadedFileNames && null !== sessionStorage.uploadedFileNames) {
                            uploadedFileNames = (sessionStorage.uploadedFileNames).split(',');
                        }

                        //Store unique file names only (in case of chunking)
                        if (-1 == uploadedFileNames.indexOf(fileName)) {
                            uploadedFileNames.push(fileName);
                            sessionStorage.uploadedFileNames = uploadedFileNames.toString();
                        }

                        //Request file validation...
                        requestFileValidation(currentUploadId, fileName, workerMonitorValidation, progressWrapper, progressBar);
                    }
                },
                "drop": function (event, data) {
                    //console.log('Dropped files:');
                    //Add dropped files...
                    addFileObjects(data.files, fileObjectsForUpload, $('#' + 'lstFilesForUpload'));
                }
            });

        //'Change' handler for multiple file input...
        $('#' + 'inpFilesForUpload').on('change', function (event) {
            //Check for file selections...
            var files = this.files;
            addFileObjects(files, fileObjectsForUpload, $('#' + 'lstFilesForUpload'));

            //Reset input's value to support multiple entry of the same file path and name...
            //Source: https://stackoverflow.com/questions/12030686/html-input-file-selection-event-not-firing-upon-selecting-the-same-file
            this.value = null;
        });

        //'Click' handler for Files for Upload, Continue
        $('#' + 'btnFilesForUploadContinue').on('click', function (event) {
            //Retrieve list of files for upload
            if (0 < fileObjectsForUpload.length) {
                //List entries exist - generate upload Id, if indicated...
                if (null == currentUploadId) {
                    currentUploadId = randomId.generateId();
                }

                //Retain in session storage...
                sessionStorage.currentUploadId = currentUploadId;                           //current upload Id

                //Invoke jQuery File Uploader 'add' method...
                var dropDiv = $('#' + 'divFilesForUpload');
                dropDiv.fileupload('add', { "files": fileObjectsForUpload });

                //Disable button...
                $('#' + 'btnFilesForUploadContinue').addClass('disabled');

                //Display 'file upload' alert...
                //Source: http://www.java2s.com/Tutorials/HTML_CSS/Bootstrap_Example/Alert/Show_alert_block_with_fade_in.htm
                $('#' + 'alertFileUpload').fadeIn({"duration": 500});
            }
        });

        //'Click' handler for Cancel 'anchor'
        $('a.cancel').on('click', function(event) {
            //Clear session storage items...
            sessionStorage.removeItem('currentUploadId');
            sessionStorage.removeItem('uploadedFileNames');
            sessionStorage.removeItem('fileUploadCount');

            //Queue remove request to server...
            removeUploadId(currentUploadId);
        });

        //Create Random Id instance...
        randomId = new RandomId({
            'iterationCount': 10,
            'characterSets': ['alpha', 'numeric']
        });

        //Start a worker and create a monitor instance...
        workerValidation = new Worker("/Scripts/custom/workers/workerCsvValidationResults.js");

        workerMonitorValidation = new WorkerMonitor();
        workerMonitorValidation.startMonitoring(workerValidation);

        var m = 6;

        ++m;


    });

</script>