
@{
    ViewBag.Title = "ValidateFiles";
    ViewBag.Name = "validateFiles";

    string qualifier = TempData.Peek("qualifier") as string;

    Layout = "~/Views/Shared/_LayoutBasic.cshtml";
}

<link rel="stylesheet" href="~/Content/mvcfileupload/blueimp/jquery.fileupload.css" />


<h2>Upload Report</h2>

<!-- Dynamic panel template -->
<div class="panel panel-default templatePanelClass hidden">
    <div class="panel-heading">
        <h3 class="panel-title">
            <a style="font-weight: bold; " class="accordion-toggle" data-toggle="collapse" data-parent="#pnlgrpFiles" href="#collapseTemplate">
                Panel Template
            </a>
        </h3>
    </div>
    <div id="collapseTemplate" class="panel-collapse collapse">
        <div class="panel-body">
            <div class="pull-left">
                @*<h4 class="h4Title">Validation Results<span class="badge spanTitleBadge hidden"></span></h4>*@
                <ul class="panelListTemplate list-group">
                    <!-- <li> list items markup goes here...</li> -->
                </ul>
                @*<h4>Data <span class="badge spanData hidden"></span></h4>
                <ul class="dataListTemplate list-group">*@
                    <!-- <li> data markup goes here...</li> -->
                @*</ul>*@
            </div>
        </div>
    </div>
</div>

<div class="container">

    <!-- Dynamic collapse for validated files -->
    <div class="row">
        <div class="col_md_12">
            @*<div class="panel-group uploader" id="pnlgrpFiles"></div>*@
            <div  style="padding-left: 1.0em; padding-right: 1.0em;" class="panel-group uploader-border" id="pnlgrpFiles"></div>
        </div>
    </div>

    <div class="row">
        <div class="btn-group col-md-12" style="position: relative;">

            <div id="alertDbLoad" class="alert alert-info fade in hidden col-md-5 col-md-offset-3" role="alert">
                <span class="glyphicon glyphicon-refresh spin"></span>
                <span>Database load in progress.  Please do not close the current page!!</span>
            </div>

            <div class="pull-right">
                <a href="/home/index" class="btn btn-warning cancel">Cancel</a>
@if ("meta_data" == qualifier)
{
                <a href="/CSVUpload/RevisedUploadData/DragAndDropFiles_meta_data" class="btn btn-info" style="margin-left: 0.5em;">Previous</a>
}
else
{
                <a href="/CSVUpload/RevisedUploadData/DragAndDropFiles_data_values" class="btn btn-info" style="margin-left: 0.5em;">Previous</a>
}

                <button type="button" id="btnValidationSummaryContinue" class="btn btn-success disabled" style="margin-left: 0.5em;">Complete Upload</button>
                <a id="btnDbSummaryReport" class="btn btn-primary hidden" href="/CSVUpload/RevisedUploadData/DbSummaryReport" style="margin-left: 0.5em;">Upload Summary</a>
            </div>
        </div>
    </div>

</div>

<script src="~/Scripts/custom/revisedUploadUtils.js"></script>

<script type="text/javascript">

    //Build dynamic collapse(s) for file validation results...
    function buildValidationResultsMarkup(panelGroupId, validationResults) {
        //Validate/initialize input parameters...
        if (('undefined' !== typeof panelGroupId && null != panelGroupId) &&
            ('undefined' !== typeof validationResults && null != validationResults)) {
            //Input parameters valid...
            var jqPanelGroup = $('#' + panelGroupId);
            var jqPanelTemplate = $('.templatePanelClass');
            var idCount = 0;

            //Clear current collapse markup, if any...
            jqPanelGroup.empty();

            //For each validation result...
            var openErrorPanel = true;
            var length = validationResults.length;
            for (var i = 0; i < length; ++i) {
                var validationResult = validationResults[i];

                //Clone panel template...
                var newPanel = jqPanelTemplate.clone();
                newPanel.removeClass('hidden');
                newPanel.find('.collapse').removeClass('in');

                //Update anchor href...
                var toggle = newPanel.find('.accordion-toggle');
                var id = 'collapse-' + (idCount++);
                toggle.attr('href', '#' + id);

                //Display file name and validation information... 
                var fileName = validationResult.FileName
                var validation = validationResult.FileValidator;

                //var msg = 'File: ' + fileName;
                var msg = '';

                msg = (((0 >= validation.InvalidHeaderNames.length) && (0 >= validation.MissingRequiredHeaderNames.length))
                    ? '<span class="badge" style="background-color: green;">OK</span>' : '<span class="badge"  style="background-color: red;">ERROR</span>');
                msg += ' ' + fileName;

                toggle.html(msg);

                //Disable toggle for 'OK' validations - enable 'Complete Upload' button for 'OK validations...
                if ((0 >= validation.InvalidHeaderNames.length) && (0 >= validation.MissingRequiredHeaderNames.length)) {
                    toggle.attr('data-toggle', '');

                    $('#' + 'btnValidationSummaryContinue').removeClass('disabled');
                }

                //Update collapse id...
                newPanel.find('.panel-collapse').attr('id', id);

                //If panel contains errors, open, if indicated...
                if (openErrorPanel &&
                    ((0 < validation.InvalidHeaderNames.length) || (0 < validation.MissingRequiredHeaderNames.length))) {
                    newPanel.find('.panel-collapse').addClass('in');
                    openErrorPanel = false;
                }

                //Add items to panel headers list...
                var panelList = newPanel.find('.panelListTemplate');
                var headerErrors = validation.InvalidHeaderNames;
                var hLength = headerErrors.length;

                var missingHeaders = validation.MissingRequiredHeaderNames;
                var mLength = missingHeaders.length;

                var validHeaders = validation.ValidHeaderNames;
                var vLength = validHeaders.length;

                var modelType = validation.CandidateTypeName;
                var recordCount = validation.CandidateRecordCount;
                var hMsg = '';

                if ((0 < hLength) || (0 < mLength)) {
                    //Header errors - add to list...
                    if (0 < hLength) {
                        hMsg = 'Invalid headers: ' + headerErrors.join(', ');
                        panelList.append('<li class="list-group-item"> ' + hMsg + '</li>');
                    }

                    if ('unknown' !== modelType.toLowerCase()) {
                        //Known model type - display missing headers, if any
                        if (0 < mLength) {
                            hMsg = 'Missing headers: ' + missingHeaders.join(', ');
                            panelList.append('<li class="list-group-item"> ' + hMsg + '</li>');
                        }
                    }
                    else {
                        //Unknown model type - display message...
                        hMsg = 'File contents map to no known model type';
                        panelList.append('<li class="list-group-item"> ' + hMsg + '</li>');
                    }
                }
                else {
                    //No header errors - add headers OK message to list...
                    panelList.append('<li class="list-group-item"> ' + 'No header validation errors reported' + '</li>');
                }

                //Append to panel group...
                jqPanelGroup.append(newPanel.fadeIn());
            }
        }
    }

    //Retrieve validation results for the input uploadId...
    function getValidationResults(currentUploadId) {
        //Validate/initialize input parameters...
        if ('undefined' !== typeof currentUploadId && null !== currentUploadId) {
            //Input parameters valid - set url...
            var url = '/api/revisedupload/get/' + currentUploadId + '/';

            $.ajax({
                "url": url,
                "type": "GET",
                "async": true,
                "dataType": "json",
                "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                "success": function (data, textStatus, jqXHR) {
                    console.log('RevisedUpload GET success!!');
                    var validationResults = data;
                    var length = validationResults.length;
                    console.log('getValidationResults(...) validationResults.length = ' + length);
                    for (var i = 0; i < length; ++i) {
                        console.log("Validation results for: " + validationResults[i].FileName);
                    }

                    //Display validation results...
                    buildValidationResultsMarkup('pnlgrpFiles', validationResults);
                },
                "error": function (xmlhttprequest, textStatus, message) {
                    //Failure - Log messsage received from server...
                    console.log('RevisedUpload GET reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                }
            });
        }
    }

    //Start DB processing of the validated CSV files...
    function startDbProcessing(currentUploadId) {
        //Validate/initialize input parameters...
        if ('undefined' !== typeof currentUploadId && null !== currentUploadId) {
            //Input parameters valid - set url...
            var url = '/api/revisedupload/put/' + currentUploadId + '/';

            $.ajax({
                "url": url,
                "type": "PUT",
                "async": true,
                "dataType": "json",
                "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
                "success": function (data, textStatus, jqXHR) {
                    console.log('RevisedUpload PUT success!!');
                    var dbResults = data;

                    //Controller db load process complete - fade out db load alert...
                    $('#' + 'alertDbLoad').fadeOut({
                        "duration": 1000,
                        "complete": function () {
                            //Show DB Summary Report button...
                            $('#' + 'btnDbSummaryReport').removeClass('hidden');
                        }
                    });



                    //TO DO - disable continue button
                    //        show show DB Summary Report button...
                },
                "error": function (xmlhttprequest, textStatus, message) {
                    //Failure - Log messsage received from server...
                    console.log('RevisedUpload PUT reports error: ' + xmlhttprequest.status + ' (' + message + ')');
                }
            });
        }
    }

    $(document).ready(function () {
        //console.log('Validation Summary - document ready called!!');

        //Hide the db load alert...
        $('#' + 'alertDbLoad').removeClass('hidden').hide();

        //Retrieve current upload Id...
        var currentUploadId = sessionStorage.currentUploadId;
        console.log('Validation Summary retrieves upload Id: ' + currentUploadId);

        var fileUploadCount = parseInt(sessionStorage.fileUploadCount);
        console.log('Validation Summary retrieves upload count: ' + fileUploadCount);

        //'Click' handler for Validation Summary, Continue
        $('#' + 'btnValidationSummaryContinue').on('click', function (event) {

            //Disable button...
            $('#' + 'btnValidationSummaryContinue').addClass('disabled');

            //Display 'db load' alert...
            //Source: http://www.java2s.com/Tutorials/HTML_CSS/Bootstrap_Example/Alert/Show_alert_block_with_fade_in.htm
            $('#' + 'alertDbLoad').fadeIn({ "duration": 500 });

            //Invoke db load process...
            startDbProcessing(currentUploadId);
        });

        //'Click' handler for Cancel 'anchor' 
        $('a.cancel').on('click', function (event) {
            //Clear session storage items...
            sessionStorage.removeItem('currentUploadId');
            sessionStorage.removeItem('uploadedFileNames');
            sessionStorage.removeItem('fileUploadCount');

            //Queue remove request to server...
            removeUploadId(currentUploadId);
        });

        //Queue retrieval of validation results...
        setTimeout(function () {
            getValidationResults(currentUploadId);
        }, 100);
    });

        ////For now - set an interval to request validation data...
        //var intervalId = setInterval(function () {

        //    $.ajax({
        //        "url": url,
        //        "type": "GET",
        //        "async": true,
        //        "dataType": "json",
        //        "cache": false, //So IE does not cache when calling the same URL - source: http://stackoverflow.com/questions/7846707/ie9-jquery-ajax-call-first-time-doing-well-second-time-not
        //        "success": function (data, textStatus, jqXHR) {
        //            console.log('RevisedUpload GET success!!');
        //            var validationResults = data;
        //            var length = validationResults.length;
        //            for (var i = 0; i < length; ++i) {
        //                console.log("Validation results for: " + validationResults[i].FileName);
        //            }

        //            //Display validation results...
        //            buildValidationResultsMarkup('pnlgrpFiles', validationResults);

        //            //Check for all results returned...
        //            if (fileUploadCount === validationResults.length) {
        //                clearInterval(intervalId);  //Clear the interval...
        //            }
        //        },
        //        "error": function (xmlhttprequest, textStatus, message) {
        //            //Failure - Log messsage received from server...
        //            console.log('RevisedUpload GET reports error: ' + xmlhttprequest.status + ' (' + message + ')');
        //            clearInterval(intervalId);  //Clear the interval...
        //        }                
        //    });
        //}, 100);


</script>